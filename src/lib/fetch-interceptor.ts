/**
 * Fetch Interceptor
 * Farcaster SDKÂÜÖ„ÅÆPrivy analytics„É™„ÇØ„Ç®„Çπ„Éà„Çí„Éó„É≠„Ç≠„Ç∑ÁµåÁî±„ÅßÈÄÅ‰ø°„Åô„Çã„Åü„ÇÅ„ÅÆfetch„Ç§„É≥„Çø„Éº„Çª„Éó„Çø„Éº
 */

// ÂÖÉ„ÅÆfetchÈñ¢Êï∞„Å®XMLHttpRequest„Çí‰øùÂ≠òÔºà„ÇØ„É©„Ç§„Ç¢„É≥„Éà„Çµ„Ç§„Éâ„Åß„ÅÆ„ÅøÔºâ
const originalFetch = typeof window !== 'undefined' ? window.fetch : undefined;
const originalXHR =
  typeof window !== 'undefined' ? window.XMLHttpRequest : undefined;

// „Ç§„É≥„Çø„Éº„Çª„Éó„ÉàÂØæË±°„ÅÆURL
const PROXY_ANALYTICS_URL =
  '/api/proxy/privy-farcaster/api/v1/analytics_events';

/**
 * Fetch Interceptor„ÇíÂàùÊúüÂåñ
 */
export function initializeFetchInterceptor() {
  if (typeof window === 'undefined' || !originalFetch || !originalXHR) {
    return;
  }

  // Êó¢„Å´„Ç§„É≥„Çø„Éº„Çª„Éó„Éà„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó
  if (
    '__intercepted' in window.fetch &&
    (window.fetch as { __intercepted?: boolean }).__intercepted
  ) {
    console.log('üîÑ Fetch interceptor already initialized');
    return;
  }

  console.log('üîß Initializing fetch interceptor for Privy analytics...');

  // „Ç∞„É≠„Éº„Éê„É´„Çπ„Ç≥„Éº„Éó„Åßofetch„ÇÇ„Ç§„É≥„Çø„Éº„Çª„Éó„ÉàÔºàFarcaster SDK„Åß‰ΩøÁî®„Åï„Çå„ÇãÂèØËÉΩÊÄßÔºâ
  const globalWindow = window as {
    $fetch?: (url: string, options?: unknown) => Promise<unknown>;
  };
  if (globalWindow.$fetch) {
    const original$fetch = globalWindow.$fetch;
    globalWindow.$fetch = async (url: string, options?: unknown) => {
      if (url.includes('privy.farcaster.xyz/api/v1/analytics_events')) {
        console.log(
          'üîÑ Intercepting $fetch to Privy analytics, redirecting to proxy',
        );
        return original$fetch(PROXY_ANALYTICS_URL, options);
      }
      return original$fetch(url, options);
    };
  }

  // fetch„Çí„Ç™„Éº„Éê„Éº„É©„Ç§„Éâ
  window.fetch = async function interceptedFetch(
    input: RequestInfo | URL,
    init?: RequestInit,
  ): Promise<Response> {
    // URL„ÇíÊñáÂ≠óÂàó„Å´Â§âÊèõ
    const url =
      typeof input === 'string'
        ? input
        : input instanceof URL
          ? input.href
          : input.url;

    // „Åô„Åπ„Å¶„ÅÆPrivy„É™„ÇØ„Ç®„Çπ„Éà„Çí„É≠„Ç∞Âá∫ÂäõÔºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ
    if (url.includes('privy.farcaster.xyz')) {
      console.log('üîç Fetch Interceptor detected Privy request:', url);
      console.log('üîç Method:', init?.method || 'GET');
      console.log('üîç Headers:', init?.headers);
      console.log('üîç Request type:', typeof input);
    }

    // Privy analytics URL„Çí„Ç§„É≥„Çø„Éº„Çª„Éó„ÉàÔºà„Çà„ÇäÊüîËªü„Å™„Éû„ÉÉ„ÉÅ„É≥„Ç∞Ôºâ
    if (url.includes('privy.farcaster.xyz/api/v1/analytics_events')) {
      console.log(
        'üîÑ Intercepting Privy analytics request, redirecting to proxy',
      );
      console.log('üéØ Original URL:', url);
      console.log('üîÄ Proxy URL:', PROXY_ANALYTICS_URL);

      try {
        // „Éó„É≠„Ç≠„Ç∑URL„Åß„É™„ÇØ„Ç®„Çπ„Éà„ÇíÂÆüË°å
        const response = await originalFetch(PROXY_ANALYTICS_URL, {
          ...init,
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
            ...init?.headers,
          },
        });

        console.log('‚úÖ Proxy analytics request successful:', response.status);
        return response;
      } catch (error) {
        console.warn('‚ö†Ô∏è Proxy analytics request failed:', error);

        // „Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÅØÊàêÂäü„É¨„Çπ„Éù„É≥„Çπ„ÇíÊ®°ÂÄ£
        return new Response(JSON.stringify({ success: true }), {
          status: 200,
          statusText: 'OK',
          headers: {
            'Content-Type': 'application/json',
          },
        });
      }
    }

    // „Åù„ÅÆ‰ªñ„ÅÆ„É™„ÇØ„Ç®„Çπ„Éà„ÅØÈÄöÂ∏∏ÈÄö„ÇäÂá¶ÁêÜ
    return originalFetch(input, init);
  };

  // XMLHttpRequest„ÇÇ„Ç§„É≥„Çø„Éº„Çª„Éó„Éà
  window.XMLHttpRequest = function InterceptedXMLHttpRequest() {
    const xhr = new originalXHR();
    const originalOpen = xhr.open;

    xhr.open = function (
      method: string,
      url: string | URL,
      ...args: unknown[]
    ) {
      const urlString = typeof url === 'string' ? url : url.toString();

      // Privy analytics URL„Çí„Ç§„É≥„Çø„Éº„Çª„Éó„Éà
      if (urlString.includes('privy.farcaster.xyz/api/v1/analytics_events')) {
        console.log(
          'üîÑ Intercepting XMLHttpRequest to Privy analytics, redirecting to proxy',
        );
        console.log('üéØ Original URL:', urlString);
        console.log('üîÄ Proxy URL:', PROXY_ANALYTICS_URL);
        return originalOpen.call(
          this,
          method,
          PROXY_ANALYTICS_URL,
          ...(args.map((arg) => arg ?? true) as [boolean, string?, string?]),
        );
      }

      // „Åù„ÅÆ‰ªñ„ÅÆ„É™„ÇØ„Ç®„Çπ„Éà„ÅØÈÄöÂ∏∏ÈÄö„Çä
      return originalOpen.call(
        this,
        method,
        urlString,
        ...(args.map((arg) => arg ?? true) as [boolean, string?, string?]),
      );
    };

    return xhr;
  } as unknown as typeof XMLHttpRequest;

  // „Ç§„É≥„Çø„Éº„Çª„Éó„ÉàÊ∏à„Åø„Éï„É©„Ç∞„ÇíË®≠ÂÆö
  (window.fetch as { __intercepted?: boolean }).__intercepted = true;
  (window.XMLHttpRequest as { __intercepted?: boolean }).__intercepted = true;
  console.log(
    '‚úÖ Fetch and XMLHttpRequest interceptor initialized successfully',
  );
}

/**
 * Fetch Interceptor„ÇíÁÑ°ÂäπÂåñ
 */
export function disableFetchInterceptor() {
  if (typeof window === 'undefined' || !originalFetch || !originalXHR) {
    return;
  }

  const fetchWithFlag = window.fetch as { __intercepted?: boolean };
  const xhrWithFlag = window.XMLHttpRequest as { __intercepted?: boolean };

  if (fetchWithFlag.__intercepted) {
    window.fetch = originalFetch;
    fetchWithFlag.__intercepted = undefined;
  }

  if (xhrWithFlag.__intercepted) {
    window.XMLHttpRequest = originalXHR;
    xhrWithFlag.__intercepted = undefined;
  }

  console.log('üîÑ Fetch and XMLHttpRequest interceptor disabled');
}
